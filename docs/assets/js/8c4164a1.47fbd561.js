"use strict";(self.webpackChunkcase_study_demo=self.webpackChunkcase_study_demo||[]).push([[1],{6710:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Introduction","href":"/rabbitory_webpage/docs/Introduction","docId":"Introduction","unlisted":false},{"type":"link","label":"Background","href":"/rabbitory_webpage/docs/Background","docId":"Background","unlisted":false},{"type":"link","label":"The RabbitMQ Ecosystem","href":"/rabbitory_webpage/docs/RabbitMQEcosystem","docId":"RabbitMQEcosystem","unlisted":false},{"type":"link","label":"Meet Rabbitory","href":"/rabbitory_webpage/docs/MeetRabbitory","docId":"MeetRabbitory","unlisted":false},{"type":"link","label":"The Control Panel","href":"/rabbitory_webpage/docs/ControlPanel","docId":"ControlPanel","unlisted":false},{"type":"link","label":"Architecture","href":"/rabbitory_webpage/docs/ArchitectureOverview","docId":"ArchitectureOverview","unlisted":false},{"type":"link","label":"Technical Decisions & Challenges","href":"/rabbitory_webpage/docs/Technical","docId":"Technical","unlisted":false},{"type":"link","label":"Future Work","href":"/rabbitory_webpage/docs/FutureWork","docId":"FutureWork","unlisted":false}]},"docs":{"ArchitectureOverview":{"id":"ArchitectureOverview","title":"Architecture Overview","description":"Architecture","sidebar":"tutorialSidebar"},"Background":{"id":"Background","title":"Background","description":"To understand why a tool like Rabbitory matters, let\u2019s first explore what message queues are, how RabbitMQ fits into that domain, and why these tools are so valuable in modern distributed systems.","sidebar":"tutorialSidebar"},"ControlPanel":{"id":"ControlPanel","title":"The Control Panel","description":"The Rabbitory Control Panel enables Rabbitory to function as a RabbitMQ-as-a-Service solution. It provides a centralized interface for provisioning, configuring, and managing RabbitMQ instances, as well as the underlying EC2 infrastructure of each instance. Designed for flexibility and ease of use, the Control Panel streamlines complex server management tasks into a smooth and accessible user experience. Here are the key features:","sidebar":"tutorialSidebar"},"FutureWork":{"id":"FutureWork","title":"Future Work","description":"Future Work","sidebar":"tutorialSidebar"},"Introduction":{"id":"Introduction","title":"Introduction","description":"Rabbitory is an open-source, self-hosted message queue management tool built specifically for RabbitMQ, one of the most widely used message brokers in modern software systems. It streamlines the deployment, configuration, and control of RabbitMQ instances and hosts the platform on the cloud through AWS.","sidebar":"tutorialSidebar"},"MeetRabbitory":{"id":"MeetRabbitory","title":"Meet Rabbitory","description":"Most teams face a tradeoff when managing RabbitMQ: DIY setups demand too much time and expertise, while commercial platforms offer too little control over infrastructure.","sidebar":"tutorialSidebar"},"RabbitMQEcosystem":{"id":"RabbitMQEcosystem","title":"The RabbitMQ Ecosystem","description":"Developers wanting to leverage a message queue in their software architecture have multiple options. One popular option is RabbitMQ, an open-source message-queuing software that acts as an intelligent middleman for routing messages. RabbitMQ is a compelling choice for teams that need support for multiple protocols, advanced messaging features, or fine-grained control over their messaging environment.","sidebar":"tutorialSidebar"},"Technical":{"id":"Technical","title":"Technical Decisions & Challenges","description":"Automating the AWS Cloud infrastructure and designing the Control Panel for Rabbitory came with its own set of unique considerations and challenges. Below is a summary of the most salient decisions we made as a team and what challenges we encountered in building this tool.","sidebar":"tutorialSidebar"}}}}')}}]);